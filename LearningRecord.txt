Git学习记录
一、创建版本库
mkdir 创建文件夹
touch 新建文件
vi 文件名 编辑文件
git init初始化Git仓库

添加文件到Git仓库
 1.git add xx 可反复使用，添加多个文件
 2.git commit xx 提交文件。-m "xxx" 本次提交说明

二、时光机穿梭
git status 查看结果 仓库当前状态
git diff xx 查看difference  按Q退出
 
三、版本回退
git log 显示从最近到最远的提交日志  git log --pretty=oneline
git reset --hard HEAD^  在Git中， HEAD表当前版本,上个版本就是HEAD^，
						上上个版本就是HEAD^^，当然往上100个版本写100个^较容易数不过来，
						 所以写成HEAD~100.
git reset --hard commit_id 根据id换版本 
git reflog 记录每一次命令
git log 查看提交历史

四、工作区和暂存区
工作区(Working Directory):就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
版本库(Repository):工作区有一个隐藏目录“.git”，这个不算工作区，而是Git的版本库。
第一步是 “git add”把 件添加进去，实际上就是把 件修改添加到暂存区; 
第二步是 “git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支。

git add命令实际上就是把要提交的所有修改放到暂存区(Stage)，然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

五、管理修改
每次修改，如果不add到暂存区，那就不会加入到commit中。

六、撤销修改
git checkout -- readmi.txt  把文件在工作区的修改全部撤销
							总之，就是让这个文件回到最近一次git commit或git add时的状态。
git reset HEAD file 将暂存区的文件修改回退到工作区

七、删除文件
git rm file 从版本库中删除文件
git checkout -- file 从版本库中恢复文件

八、远程仓库
创建SSH Key
登陆GitHub

九、添加远程库
$ git remote add origin git@github.com:michaelliao/learngit.git  已有的本地仓库与之关联
$ git push -u origin master 把本地库的所有内容推送到远程库上

十、从远程库克隆
$ git clone git@github.com:michaelliao/gitskills.git
Cloning into 'gitskills'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
$ cd gitskills
$ ls
README.md

使 https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只 开放http端口的公司内部就无法使用ssh协议而只能用https。
Git 持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

十一、分支管理
Git的分支是与众不同的，无论创建、切换和删除分 ，Git在1秒钟之内就能完成! 无论 你的版本库是1个文件还是1万个文件

(1)创建与合并分支
首先，我们创建dev分支，然后切换到dev分支:
$ git checkout -b dev
Switched to a new branch 'dev'

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:
$ git branch dev
$ git checkout dev
Switched to branch 'dev'

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)

git merge 用于合并指定分支到当前分支

$ git branch -d dev
Deleted branch dev (was fec145a).
删除后，查看branch，就只剩下master分支了:
$ git branch
* master

 结
Git鼓励大量使用分支: 
查看分支:git branch 
创建分支:git branch name 
切换分支:git checkout name
创建+切换分支:git checkout -b name 
合并某分支到当前分支:git merge name 
删除分支:git branch -d name